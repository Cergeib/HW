def degree():# функция возводит все элементы списка в степень
    d = int(input('введите целочисленное значение степени'))
    a = [input('заполните список целочисленными значениями через enter, чтобы закончить, введите stop')]

    for i in a:





        b = 'stop'# стоп слово
        if i == b:# сравнивает элементы списка со стоп словом
            break # останавливает заполение списка если введено стоп слово
        if i != b:
            a.append(input()) # заполняет список
    a = a[:-1]# уберает стоп слово из списка
    a = list(map(lambda x: '0' if x == '' else x, a))
    a = [int(x) for x in a] #переводит элементы саиска в int

    c = [i ** d for i in a] # возводит элемены списка в степень
    print(c)


def exponentiation():# функция возводит все элементы списков в степень. принемает количество списков заданное пользователем, для каждого списка принемает пользовательскую степень
    z = int(input("введите целочисленное количество списков"))
    q = 0# счетчик
    while q < z: # сравниваем значение счетчика с количеством списков
        if z != 1:#если кол-во списков больше 1го, то после выполнения функции выводим надпись - "работаем со следующим списком"
            degree()

            print("работаем со следующим списком")
        if z == 1:#если кол-во списков = 1, то после выполнения функции выводим надпись - 'вы получили все ваши списки!!!'
            degree()


        q = q + 1

    print('вы получили все ваши списки!!!')



def root():# функция выводит корень по элементно из списка.
    d = int(input('введите целочисленное значение корня'))
    a = [input('заполните список целочисленными значениями через enter, чтобы закончить, введите stop')]

    for i in a:
        b = 'stop'
        if i == b:
            break
        if i != b:
            a.append(input())
    a = a[:-1]
    a = list(map(lambda x: '0' if x == '' else x, a))
    a = [int(x) for x in a]

    c = [i ** (1/d) for i in a]
    print(c)



def root_xtraction():# функция выводит корень по элементно из списка. принемает количество списков заданное пользователем, для каждого списка принемает пользовательский корень
    z = int(input("введите целочисленное количество списков"))
    q = 0
    while q < z:

        if z != 1:
            root()

            print("работаем со следующим списком")
        if z == 1:
            root()

        q = q + 1

    print('вы получили все ваши списки!!!')


def logarithm():# функция выводит log из всех элементов списка по основанию пользователя.
    import math

    d = int(input('введите целочисленное значение основания'))
    a = [input(
        "заполните список аргументов целочисленными значениями" "(аргумент > 0, аргумент ≠ 1)" " через enter, чтобы закончить, введите stop")]

    for i in a:
        b = 'stop'
        if i == b:
            break
        if i != b:
            a.append(input())
    a = a[:-1]
    a = list(map(lambda x: '0' if x == '' else x, a))
    a = [int(x) for x in a]

    c = [math.log(i, d) for i in a]

    print(c)


def logarithms():# функция выводит log из всех элементов списка по основанию пользователя. принемает количество списков заданное пользователем, для каждого списка принемает пользовательское оснавание.
    z = int(input("введите целочисленное количество списков"))
    q = 0
    while q < z:
        if z != 1:
            logarithm()

            print("работаем со следующим списком")
        if z == 1:
            logarithm()


        q = q + 1

    print('вы получили все ваши списки!!!')








calculator =str(input('Если вы хотите возвести ваши списки в степень, то введите **. \n'
            'Если вы хотите вычеслить корень, то введите /. \n'
            'Если вы хотите вычеслить log, то log'))
if calculator == '**':
    exponentiation()
if calculator == '/':
    root_xtraction()
if calculator == 'log':
    logarithms()

